/*
 
 ETTransaction.h
 Entrust IdentityGuard Mobile SDK
 
 Copyright (c) 2014 Entrust, Inc. All rights reserved.
 Use is subject to the terms of the accompanying license agreement. Entrust Confidential.
 
 */
#import <Foundation/Foundation.h>
#import "ETDataTypes.h"

#pragma mark -
#pragma mark ETTransactionDetail interface


/// Each individual transaction detail consists of a name/value pair.
/// For example, in a transaction where an amount of $10000 was involved,
/// this may be represented by an instance of this class with the detail
/// set to "Amount" and the value set to "$10000"

@interface ETTransactionDetail : NSObject<NSSecureCoding>
{
@private
    /// The transaction detail (label). For example, From Account.
    NSString *detail;
    /// The value associated with the transaction detail.
    NSString *value;
}

@property (nonatomic, strong) NSString* detail;
@property (nonatomic, strong) NSString* value;


/// Basic initializer to create an empty object.

-(id)init;


/// Inialize from an archived object.

-(id)initWithCoder:(NSCoder*)decoder;


/// Encode this object using the given encoder.

-(void)encodeWithCoder:(NSCoder*)encoder;

@end


#pragma mark -
#pragma mark ETTransaction interface


/// An ETTransaction contains information about a transaction received
/// from the Entrust IdentityGuard Self-Service Module Transaction component.  A transaction consists of:
/// <ul>
/// <li>identity ID - the identifier of the identity the transaction is for.
///     For applications that allow multiple identities, this
///     can be used to tell which ETIdentity the transaction is for.</li>
/// <li>date - the date the transaction was received by the SDK.</li>
/// <li>transaction ID - the identifier of the transaction. This identifier is
///     generated by Entrust IdentityGuard when the transaction is initiated.</li>
/// <li>transaction details - a list of  transaction details for this transaction.</li>
/// </ul>
/// <p>
/// Transactions are initiated by an application calling the Entrust IdentityGuard authentication
/// API and providing transaction details. With an Entrust IdentityGuard system configured to send
/// transactions to the Transaction component and then on to applications via the SDK, the received
/// transaction details will be identical to the details passed to the Entrust IdentityGuard
/// authentication API.

@interface ETTransaction : NSObject<NSSecureCoding> {
@private
    
    /// The identifier of the identity the transaction is for.
    
    NSString* identityId;
    
    /// The identifier of the transaction
    
    NSString* transactionId;
    
    /// The date the transaction was received by the SDK.
    
    NSDate* date;
    
    /// Array of ETTransactionDetail, one for each detail in the transaction.
    NSArray* details;
    
    /// Summary description for this transaction.
    NSString* summary;
    
    ///The name of the application requesting this transaction.
    NSString* appName;
    
    /// The Entrust IdentityGuard user ID of the user performing this transaction.
    NSString* userId;
    
    /// The mutual authentication challenge answer.
    NSString* mutualAuthChallenge;
    
    /// Array of choices for the mutual authentication challenge.
    NSArray* mutualAuthChoices;
    
#pragma mark - For Transaction Queuing
    
    /// The Entrust IdentityGuard priority of the user performing this transaction.
    NSString *priority;
    
    /// The Entrust IdentityGuard lifetime of the user performing this transaction.
    NSString *lifetime;
    
    /// The Entrust IdentityGuard session queued of the user performing this transaction.
    BOOL queued;
    
    /// The transaction mode that should be used to send the response back.
    ETTransactionMode transactionMode;
    
    /// The transaction response chosen by the user.
    ETTransactionResponse transactionResponse;
    
}
@property (nonatomic, strong) NSString* identityId;
@property (nonatomic, strong) NSString* transactionId;
@property (nonatomic, strong) NSDate* date;
@property (nonatomic, strong) NSArray* details;
@property (nonatomic, strong) NSString* summary;
@property (nonatomic, strong) NSString* appName;
@property (nonatomic, strong) NSString* userId;
@property (nonatomic, strong) NSString* mutualAuthChallenge;
@property (nonatomic, strong) NSArray* mutualAuthChoices;

#pragma mark - Transaction Queuing Properties

@property (nonatomic, strong) NSString *priority;
@property (nonatomic, strong) NSString *lifetime;
@property (nonatomic) BOOL queued;





@property (nonatomic) ETTransactionMode transactionMode;
@property (nonatomic) ETTransactionResponse transactionResponse;


/// Basic initializer for a new transaction object.

-(id)init;


/// Inialize from an archived object.

-(id)initWithCoder:(NSCoder*)decoder;


/// Encode this object using the given encoder.

-(void)encodeWithCoder:(NSCoder*)encoder;


/// Converts a string to a transaction mode.
/// @param string The string to convert.
/// @returns The transaction mode or nil.

+ (ETTransactionMode) transactionModeFromString:(NSString *)string;


/// Converts a transaction mode to a string representation.
/// @param transactionMode The transaction mode to convert.
/// @returns The string respresentation of the mode.

+ (NSString *) stringFromTransactionMode:(ETTransactionMode)transactionMode;


/// Converts a string to a transaction response.
/// @param string The string to convert.
/// @returns The transaction response or nil.

+ (ETTransactionResponse) transactionResponseFromString:(NSString *)string;


/// Converts a transaction response to a string representation.
/// @param transactionResponse The transaction response to convert.
/// @returns The string respresentation of the response.

+ (NSString *) stringFromTransactionResponse:(ETTransactionResponse)transactionResponse;

@end
