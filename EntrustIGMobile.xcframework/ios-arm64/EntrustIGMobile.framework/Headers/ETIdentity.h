/*
 
 ETIdentity.h
 Entrust IdentityGuard Mobile SDK
 
 Copyright (c) 2014 Entrust, Inc. All rights reserved.
 Use is subject to the terms of the accompanying license agreement. Entrust Confidential.
 
 */

#import "ETLaunchUrlParams.h"

@class ETTransaction;


/// A constant indicating how long an OTP is valid for, in seconds.
/// Applications that display an OTP to a user and dynamically update
/// after a period of time should use this constant for how long each OTP
/// should be shown.
extern const double ET_OTP_VALIDITY_PERIOD;


/// The Identity manages all of the values that make up a soft token identity.
/// An identity includes the following publicly accessible information.
/// <ul>
/// <li>seed - the secret data used to generate one-time passwords (OTPs).</li>
/// <li>identity ID - an identifier for this identity.</li>
/// <li>device ID - an identifier for the device on which the identity is stored.  This value may not be set.</li>
/// <li>serial number - the serial number of this identity.</li>
/// <li>
/// PIN required - a flag indicating if PIN protection is required for this identity
/// according to IdentityGuard policy. Note that it is up to applications
/// to enforce PIN protection; it is not enforced by the SDK in any way.
/// </li>
/// <li>
/// OTP length - the length of generated OTPs as specified by IdentityGuard
/// policy.
/// </li>
/// <li>
/// registration code - the registration code used to complete activation.
/// </li>
/// <li>
/// registered for transactions - a flag indicating if this identity has been
/// registered for transaction verification.
/// </li>
/// <li>
/// registered for notifications - a flag indicating if this identity has been
/// registered to receive notifications.
/// </li>
/// </ul>
/// <p>
/// The ETIdentity object contains functionality to generate an OTP response,
/// a transaction confirmation code and to generate and validate a PIN unlock
/// code. The identity object also contains functionality to encode and
/// decode the object according to the NSCoding protocol to facilitate
/// persistent storage of the identity.
/// <p>
/// To create a brand new identity, call the <code>generate</code> method in
/// the ETIdentityProvider class.

@interface ETIdentity : NSObject<NSSecureCoding> {
@private
    
    /// The seed data.
    /// Applications would typically only need to access this property when storing an
    /// identity.
    /// <p>
    /// When storing an identity, it is recommended that this value be encrypted or
    /// stored so that only the application using the SDK can get at it.
    /// If an attacker obtains a copy of this seed they will be able to
    /// generate the same one-time passwords as the legitimate user of the
    /// identity.
    
    NSData* seed;
    
    
    /// The identifier this identity.  This is a random identifier created
    /// when the identity is generated.
    
    NSString* identityId;
    
    
    /// Identifier of the device on which the identity resides.
    /// This value is specified when the identity is generated, or
    /// during registration of the identity with the transaction
    /// service.
    /// This value may be <code>nil</code>.
    
    NSString* deviceId;
    
    
    /// The serial number of this identity as specified during identity
    /// activation.
    
    NSString* serialNumber;
    
    
    /// The length of the OTPs generated by this identity. This value will be
    /// either 6 or 8.
    
    int otpLength;
    
    
    /// The period that an OTP code will be valid for, in seconds.
    
    int period;
    
    
    /// Flag indicating if a PIN is required for this identity according to
    /// IdentityGuard policy. It is up to the application to
    /// enforce PIN protection, if required.
    
    BOOL pinRequired;
    
    
    /// During identity activation, the user may need to manually complete
    /// activation by providing the registration code to IdentityGuard using
    /// self-service or an administration application.  This method returns
    /// the registration code required to do this.
    /// <p>
    /// Once the soft token has been successfully activated, this value should
    /// be cleared by setting it to nil.
    
    NSString* registrationCode;
    
    
    /// The HMAC algorithm that will be used when calculating the OTP.
    
    NSString* hmacAlgorithm;
    
    
    /// Return a flag indicating if this identity has been registered
    /// for transaction verification.
    
    BOOL registeredForTransactions;
    
    
    /// Return a flag indicating if this identity has been registered
    /// for online transaction verification.
    
    BOOL registeredForOnlineTransactions;
    
    
    /// Return a flag indicating if this identity has been registered
    /// for offline transaction verification.
    
    BOOL registeredForOfflineTransactions;
    
    
    /// Return a flag indicating if this identity is registered
    /// to receive notifications.
    
    BOOL registeredForNotifications;
    
    
    /// Return a flag indicating if the Security Policy for this
    /// identity is enabled. Once false, the Security Policy related feature will
    /// be disabled
    
    BOOL securityPolicyEnabled;
    
    
    /// Return a flag indicating if this identity is
    /// allowed to run on an unsecured device. one of the Security Policy feature.
    
    BOOL allowUnsecuredDevice;
    
    
    /// Return a flag indicating if this identity is
    /// allowed to use face recognition.
    
    NSNumber *allowFaceRecognition;
}

@property (nonatomic, strong) NSData* seed;
@property (nonatomic, strong) NSString* identityId;
@property (nonatomic, strong) NSString* deviceId;
@property (nonatomic, strong) NSString* serialNumber;
@property (nonatomic) int otpLength;
@property (nonatomic) int period;
@property (nonatomic) BOOL pinRequired;
@property (nonatomic, strong) NSString* registrationCode;
@property (nonatomic, strong) NSString* hmacAlgorithm;
@property (nonatomic) BOOL registeredForTransactions;
@property (nonatomic) BOOL registeredForOnlineTransactions;
@property (nonatomic) BOOL registeredForOfflineTransactions;
@property (nonatomic) BOOL registeredForNotifications;
@property (nonatomic) BOOL securityPolicyEnabled;
@property (nonatomic) BOOL allowUnsecuredDevice;
@property (nonatomic,readonly) NSNumber *allowFaceRecognition;


/// Basic object initializer.
-(id)init;


/// Decode an identity from a previously encoded version of it.

-(id)initWithCoder:(NSCoder*)decoder;


/// Encode this identity using the given encoder.

-(void)encodeWithCoder:(NSCoder*)encoder;


/// Return the OTP for this identity for the specified time.
///
/// - Parameter time the time for the OTP
/// - Returns: OTP for this identity for the specified time.

-(NSString*)getOTP:(NSDate*)time;


/// Generate the transaction confirmation code for the given transaction.
/// For applications using transaction-based authentication, this is the code
/// that must be passed to Entrust IdentityGuard to authenticate the transaction.
///
/// - Parameter transaction the transaction
/// - Returns: a transaction confirmation code.
///

-(NSString*) getConfirmationCode:(ETTransaction*)transaction;


/// Generate a PIN unlock challenge. Use this when a user has entered too many
/// incorrect PINs and the application is locked. The value returned should be
/// sent to the IdentityGuard server through some out of band mechanism, for
/// example the user calls a help desk and tells them the unlock challenge.
/// IdentityGuard will return an unlock code for the given challenge that can
/// be validated by calling <code>confirmUnlockCode</code>
///
/// - Returns: a PIN unlock challenge.
///

+(NSString*)getUnlockChallenge;


/// Confirm that the given unlock code is valid for this identity
/// and the specified unlock challenge.
///
/// - Parameter unlockChallenge: the unlock challenge
/// - Parameter unlockCode: the unlock response provided by IdentityGuard.
/// - Returns: YES if the response is valid for this identity and challenge.
///            Return NO otherwise.

-(BOOL)confirmUnlockCode:(NSString*)unlockCode forChallenge:(NSString*) unlockChallenge;


/// Attempt to generate a transaction object from the offline transaction url parameters.
/// This will verify the MAC and decrypt the data using keys derived from the token seed.
///
/// - Parameter urlParams: The offline transaction URL parameters
/// - Parameter identity: The identity to use to decrypt the transaction details.
/// - Returns: The transaction if it could be decrypted or nil.

+ (ETTransaction *) offlineTransactionFromUrlParams:(ETOfflineTransactionUrlParams *)urlParams forIdentity:(ETIdentity *)identity;


/// Generate the client authentication token that is required to communicate with the Soft Token Service.
///
/// - Parameter transactionId: the transaction id
/// - Returns: a client authentication token.
/// - Throws Exception indicates a cryptographic error encountered generating
///                      the transaction confirmation code.

-(NSString*) getClientAuthToken:(NSString*)transactionId;


@end
